{"ast":null,"code":"var _jsxFileName = \"/app/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState('');\n  const [improvedText, setImprovedText] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // 3. ローディング状態を管理するためのstateを追加\n\n  const improveText = async () => {\n    setIsLoading(true); // 3. ボタンがクリックされたときにローディング状態をtrueにする\n    try {\n      const response = await axios.post('/improve_text', {\n        text\n      });\n      setImprovedText(response.data.improved_text);\n    } catch (error) {\n      console.error('Error improving text:', error);\n    }\n    setIsLoading(false); // 3. レスポンスが返ってきたら、ローディング状態をfalseに戻す\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      style: {\n        width: '100%',\n        marginBottom: '1em'\n      },\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        width: '100%',\n        marginBottom: '1em'\n      },\n      onClick: improveText,\n      children: \"Improve Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        wordWrap: 'break-word'\n      },\n      children: isLoading ? 'Loading...' : improvedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SspJPmxFO0yDwEL9baLp0CD/zFk=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","axios","jsxDEV","_jsxDEV","App","_s","text","setText","improvedText","setImprovedText","isLoading","setIsLoading","improveText","response","post","data","improved_text","error","console","children","style","width","marginBottom","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","wordWrap","_c","render","document","getElementById","$RefreshReg$"],"sources":["/app/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [text, setText] = useState('');\r\n  const [improvedText, setImprovedText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false); // 3. ローディング状態を管理するためのstateを追加\r\n\r\n  const improveText = async () => {\r\n    setIsLoading(true); // 3. ボタンがクリックされたときにローディング状態をtrueにする\r\n    try {\r\n      const response = await axios.post('/improve_text', { text });\r\n      setImprovedText(response.data.improved_text);\r\n    } catch (error) {\r\n      console.error('Error improving text:', error);\r\n    }\r\n    setIsLoading(false); // 3. レスポンスが返ってきたら、ローディング状態をfalseに戻す\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea style={{ width: '100%', marginBottom: '1em' }} value={text} onChange={e => setText(e.target.value)} />\r\n      {/* 2. ボタンの幅をテキスト入力部分の幅と同じにする */}\r\n      <button style={{ width: '100%', marginBottom: '1em' }} onClick={improveText}>Improve Text</button>\r\n      {/* 3. ローディング状態がtrueのときには\"Loading...\"と表示し、falseのときには改良後のテキストを表示する */}\r\n      <div style={{ width: '100%', wordWrap: 'break-word' }}>{isLoading ? 'Loading...' : improvedText}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,eAAe,EAAE;QAAER;MAAK,CAAC,CAAC;MAC5DG,eAAe,CAACI,QAAQ,CAACE,IAAI,CAACC,aAAa,CAAC;IAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;IACAN,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;EACvB,CAAC;;EAED,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAUiB,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,YAAY,EAAE;MAAM,CAAE;MAACC,KAAK,EAAEjB,IAAK;MAACkB,QAAQ,EAAEC,CAAC,IAAIlB,OAAO,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEhH3B,OAAA;MAAQiB,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,YAAY,EAAE;MAAM,CAAE;MAACS,OAAO,EAAEnB,WAAY;MAAAO,QAAA,EAAC;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAElG3B,OAAA;MAAKiB,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEW,QAAQ,EAAE;MAAa,CAAE;MAAAb,QAAA,EAAET,SAAS,GAAG,YAAY,GAAGF;IAAY;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnG,CAAC;AAEV;AAACzB,EAAA,CAzBQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA2BZJ,QAAQ,CAACkC,MAAM,eAAC/B,OAAA,CAACC,GAAG;EAAAuB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEK,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}